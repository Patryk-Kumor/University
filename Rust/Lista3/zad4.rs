fn zoom(n: i32) -> String {
    let mut tab : Vec< String > = vec!["■".to_string()];
    let mut i = 1; let mut sign = true;
    while i < n{ 
        if sign {
            for i in &mut tab{ i.insert_str(0, "□");
                                   i.push_str(&"□".to_string())}
            tab.insert(0, "□".repeat((i+2) as usize ));
            tab.push( "□".repeat((i+2) as usize) );
        }
        else {
            for i in &mut tab{ i.insert_str(0, "■");
                                   i.push_str(&"■".to_string())}
            tab.insert(0, "■".repeat((i+2) as usize ));
            tab.push( "■".repeat((i+2) as usize) );        
        }
        sign = !sign;
        i+=2;
    }
    tab.into_iter().collect::<Vec<String>>().join("\n")
}

#[test]
fn test0() {
  assert_eq!(zoom(1), "■");
}
#[test]
fn test1() {
  assert_eq!(zoom(3), "□□□\n□■□\n□□□");
}
#[test]
fn test2() {
  assert_eq!(zoom(5), "■■■■■\n■□□□■\n■□■□■\n■□□□■\n■■■■■");
}
#[test]
fn test3() {
  assert_eq!(zoom(7), "□□□□□□□\n□■■■■■□\n□■□□□■□\n□■□■□■□\n□■□□□■□\n□■■■■■□\n□□□□□□□");
}
#[test]
fn test4() {
  assert_eq!(zoom(9), "■■■■■■■■■\n■□□□□□□□■\n■□■■■■■□■\n■□■□□□■□■\n■□■□■□■□■\n■□■□□□■□■\n■□■■■■■□■\n■□□□□□□□■\n■■■■■■■■■");
}
#[test]
fn test5() {
  assert_eq!(zoom(11), "□□□□□□□□□□□\n□■■■■■■■■■□\n□■□□□□□□□■□\n□■□■■■■■□■□\n□■□■□□□■□■□\n□■□■□■□■□■□\n□■□■□□□■□■□\n□■□■■■■■□■□\n□■□□□□□□□■□\n□■■■■■■■■■□\n□□□□□□□□□□□");
}
#[test]
fn test6() {
  assert_eq!(zoom(13), "■■■■■■■■■■■■■\n■□□□□□□□□□□□■\n■□■■■■■■■■■□■\n■□■□□□□□□□■□■\n■□■□■■■■■□■□■\n■□■□■□□□■□■□■\n■□■□■□■□■□■□■\n■□■□■□□□■□■□■\n■□■□■■■■■□■□■\n■□■□□□□□□□■□■\n■□■■■■■■■■■□■\n■□□□□□□□□□□□■\n■■■■■■■■■■■■■");
}
#[test]
fn test7() {
  assert_eq!(zoom(15), "□□□□□□□□□□□□□□□\n□■■■■■■■■■■■■■□\n□■□□□□□□□□□□□■□\n□■□■■■■■■■■■□■□\n□■□■□□□□□□□■□■□\n□■□■□■■■■■□■□■□\n□■□■□■□□□■□■□■□\n□■□■□■□■□■□■□■□\n□■□■□■□□□■□■□■□\n□■□■□■■■■■□■□■□\n□■□■□□□□□□□■□■□\n□■□■■■■■■■■■□■□\n□■□□□□□□□□□□□■□\n□■■■■■■■■■■■■■□\n□□□□□□□□□□□□□□□");
}
#[test]
fn test8() {
  assert_eq!(zoom(17), "■■■■■■■■■■■■■■■■■\n■□□□□□□□□□□□□□□□■\n■□■■■■■■■■■■■■■□■\n■□■□□□□□□□□□□□■□■\n■□■□■■■■■■■■■□■□■\n■□■□■□□□□□□□■□■□■\n■□■□■□■■■■■□■□■□■\n■□■□■□■□□□■□■□■□■\n■□■□■□■□■□■□■□■□■\n■□■□■□■□□□■□■□■□■\n■□■□■□■■■■■□■□■□■\n■□■□■□□□□□□□■□■□■\n■□■□■■■■■■■■■□■□■\n■□■□□□□□□□□□□□■□■\n■□■■■■■■■■■■■■■□■\n■□□□□□□□□□□□□□□□■\n■■■■■■■■■■■■■■■■■");
}
#[test]
fn test9() {
  assert_eq!(zoom(19), "□□□□□□□□□□□□□□□□□□□\n□■■■■■■■■■■■■■■■■■□\n□■□□□□□□□□□□□□□□□■□\n□■□■■■■■■■■■■■■■□■□\n□■□■□□□□□□□□□□□■□■□\n□■□■□■■■■■■■■■□■□■□\n□■□■□■□□□□□□□■□■□■□\n□■□■□■□■■■■■□■□■□■□\n□■□■□■□■□□□■□■□■□■□\n□■□■□■□■□■□■□■□■□■□\n□■□■□■□■□□□■□■□■□■□\n□■□■□■□■■■■■□■□■□■□\n□■□■□■□□□□□□□■□■□■□\n□■□■□■■■■■■■■■□■□■□\n□■□■□□□□□□□□□□□■□■□\n□■□■■■■■■■■■■■■■□■□\n□■□□□□□□□□□□□□□□□■□\n□■■■■■■■■■■■■■■■■■□\n□□□□□□□□□□□□□□□□□□□");
}


fn main() {
    println!("{:?}", zoom(1));
}
